<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-08-25T22:13:29+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Blog</title><subtitle>blog by Junha Hwang.
</subtitle><author><name>Junha Hwang</name></author><entry><title type="html">기사 요약: Is Blockchain the Future of Secure Digital Identity Management?</title><link href="http://localhost:4000/2025/08/25/%EA%B8%B0%EC%82%AC%EC%9A%94%EC%95%BD1.html" rel="alternate" type="text/html" title="기사 요약: Is Blockchain the Future of Secure Digital Identity Management?" /><published>2025-08-25T00:00:00+09:00</published><updated>2025-08-25T00:00:00+09:00</updated><id>http://localhost:4000/2025/08/25/%EA%B8%B0%EC%82%AC%EC%9A%94%EC%95%BD1</id><content type="html" xml:base="http://localhost:4000/2025/08/25/%EA%B8%B0%EC%82%AC%EC%9A%94%EC%95%BD1.html"><![CDATA[<p>이 글은 Tech Research Online에 실린 “<a href="https://techresearchonline.com/blog/blockchain-digital-identity-management/">Is Blockchain the Future of Secure Digital Identity Management?</a>” 기사를 바탕으로 작성됨</p>

<h3 id="기사-내용-요약">기사 내용 요약</h3>
<p>오늘날의 디지털 신원은 우리가 웹에 접근, 상호작용, 거래의 기반이 되었다. 하지만 최근 사이버 공격, 데이터 침해 사고의 급증으로 인하여 탈중앙화 시스템의 도입 가능성이 대두되고 있다. 이 기사에서는 기존의 신원 관리 시스템의 중앙 집중 DB 의존을 탈피하기 위한 블록체인 도입의 가능성을 말한다. 또한, 실제 진행되고 있는 블록체인 기반 신원 인증 프로젝트를 소개한다.</p>

<!--more-->

<h4 id="블록체인-도입의-이점">블록체인 도입의 이점</h4>

<p>블록체인 기술은 분산되고 투명한 구조를 바탕으로 디지털 신원 관리 방식에 대한 혁신을 불러온다. SSI(Self Sovereign Identity) 개념을 통해 개인은 자신의 신원 데이터에 대한 완전한 소유권과 통제권을 가질 수 있으며, 어떤 정보를 누구와 공유할지 직접 결정할 수 있다. 이는 불필요한 개인정보 노출을 막아 프라이버시를 강화하고, 사용자와 서비스 제공자 간의 신뢰를 높이는 데 기여한다. 또한 블록체인의 위변조가 어려운 특성과 효율적인 데이터 처리 구조는 신원 관리 과정의 안정성과 효율성을 동시에 확보할 수 있도록 지원한다. 따라서 블록체인은 기존의 패스워드 기반 시스템에 의존하지 않지 않는 신원 확인을 가능하게 한다.</p>

<h4 id="기술의-실제-적용">기술의 실제 적용</h4>

<ul>
  <li>Microsoft’s ION(Identity Overlay Network)</li>
</ul>

<p>블록체인에 기반한 마이크로소프트의 ION은 개인이 직접 제어하는 탈중앙화 신원을 제공하도록 한다.</p>

<ul>
  <li>에스토니아의 e-Residency</li>
</ul>

<p>블록체인 기반 전자 신분증을 활용해 전 세계인이 원격으로 안전하게 비즈니스와 행정 서비스를 이용할 수 있도록 한다.</p>

<ul>
  <li>Sovrin</li>
</ul>

<p>로벌 공공 인프라를 목표로 설계된 SSI 네트워크로, 개인과 조직이 중앙 기관을 거치지 않고 신원을 증명하며 필요한 정보만 선택적으로 공유할 수 있는 환경을 제공한다.</p>

<h4 id="기술-도입의-효과">기술 도입의 효과</h4>

<p>지금이 블록체인 도입에 적기인 이유는 명확하다. 사이버 공격의 급증과 GDPR·CCPA 등 강화된 규제, 의료와 IoT 분야의 디지털 전환 가속화는 안전하고 상호운용 가능한 신원 관리 시스템의 필요성을 보여준다. 블록체인은 규제 준수와 개인정보 통제를 동시에 달성할 수 있는 기술로서, 이미 여러 분야에서 시범 적용되고 있다. 앞으로는 영지식증명(ZKP), 분산 식별자(DID), 검증 가능한 자격 증명(VC) 등 첨단 암호 기술과 함께, 바이오메트릭스 및 AI·ML의 통합을 통해 글로벌 신원 표준으로 발전할 가능성이 크다. 결국 블록체인은 보안, 투명성, 효율성을 갖춘 차세대 디지털 신원 관리의 핵심 기술로 자리 잡을 가능성이 높다.</p>

<h4 id="생각">생각</h4>

<p>추가 조사 결과, 대한민국에 도입된 모바일 신분증 또한 DID를 도입하고 있다. 분산 식별자(DID) 기술을 활용하여 사용자가 자신의 신원 정보를 직접 관리할 수 있도록 설계되어 있다. 이를 통해 개인정보 유출 위험을 줄이고, 다양한 온라인 및 오프라인 서비스에서 신원 확인을 간편하고 안전하게 수행할 수 있다. 또한, 정부와 민간 기관이 협력하여 신뢰할 수 있는 신원 인증 인프라를 구축 중에 있다. 개인적으로 추상적으로만 접하던 DID 기반 신원 기술이 수년간의 검증 후, 실제로 우리나라에 적용되고 있다는 사실이 인상 깊었다. 단순한 개념을 넘어 제도와 서비스로 구현된 사례를 직접 확인할 수 있었다.</p>

<p>DID 기술은 개인에게 책임을 떠넘기는 것이 아닌가 생각도 해보았다. 결국 우리는 모든 정보를 완벽히 기억할 수 없기에 어딘가에 저장할 수밖에 없다. 로컬 저장이 이상적이지만, 평균적인 사용자는 생각보다 보안에 취약하다. 단순하게 생각해서, 잊어버렸는데 책임지라고 따질 수도 있는 법이다. 따라서 만약 신원 인증 서비스가 있다면, 탈중앙화 기반의 인증은 옵션이 되지 않을까 생각한다. 그것을 선택하기 전 충분한 주의를 주어야 하거나, 비탈릭 부테린이 말한 Guardian 같은 존재가 필요하다. 이는 사용자가 실수하거나 키를 분실했을 때 회복할 수 있는 안전망 역할을 할 수 있다.</p>]]></content><author><name>Junha Hwang</name></author><category term="Journel" /><summary type="html"><![CDATA[이 글은 Tech Research Online에 실린 “Is Blockchain the Future of Secure Digital Identity Management?” 기사를 바탕으로 작성됨 기사 내용 요약 오늘날의 디지털 신원은 우리가 웹에 접근, 상호작용, 거래의 기반이 되었다. 하지만 최근 사이버 공격, 데이터 침해 사고의 급증으로 인하여 탈중앙화 시스템의 도입 가능성이 대두되고 있다. 이 기사에서는 기존의 신원 관리 시스템의 중앙 집중 DB 의존을 탈피하기 위한 블록체인 도입의 가능성을 말한다. 또한, 실제 진행되고 있는 블록체인 기반 신원 인증 프로젝트를 소개한다.]]></summary></entry><entry><title type="html">기초적인 BFS(2)</title><link href="http://localhost:4000/2025/07/22/BOJ4179.html" rel="alternate" type="text/html" title="기초적인 BFS(2)" /><published>2025-07-22T00:00:00+09:00</published><updated>2025-07-22T00:00:00+09:00</updated><id>http://localhost:4000/2025/07/22/BOJ4179</id><content type="html" xml:base="http://localhost:4000/2025/07/22/BOJ4179.html"><![CDATA[<p>저번 글에 이어서 오늘도 BFS!</p>

<p><a href="https://www.acmicpc.net/problem/4179" target="_blank">BOJ 4179</a>이다.<br />
지난 글에서 풀었던 문제는 한 번의 탐색만 수행하면 되었지만, 오늘의 문제는 탐색을 두 번 수행한 후<br />
각각의 값들을 비교해주어야 한다. 우선 기본형의 BFS를 가져왔고, 불이 붙는 구역의 거리를 구해준다.<br />
그 후 지훈의 탈출 거리를 구해야 하는데, 우선 지훈이 초기 설정 배열의 범위를 벗어난다면 탈출에 성공!<br />
+1하여(그 전 거리이므로) 출력한다.<br />
탈출하지 않았다면 <code class="language-plaintext highlighter-rouge">continue</code> 할 조건을 찾아 넘기고, 큐가 빌 때까지 탐색을 수행하면 된다.<br />
이렇게 해도 <code class="language-plaintext highlighter-rouge">exit</code>이 되지 않았다면, 불가능하므로 IMPOSSIBLE 을 출력한다.</p>

<!--more-->

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define X first
#define Y second
</span><span class="n">string</span> <span class="n">board</span><span class="p">[</span><span class="mi">1002</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">dist1</span><span class="p">[</span><span class="mi">1002</span><span class="p">][</span><span class="mi">1002</span><span class="p">];</span> <span class="c1">// 불 전파 거리</span>
<span class="kt">int</span> <span class="n">dist2</span><span class="p">[</span><span class="mi">1002</span><span class="p">][</span><span class="mi">1002</span><span class="p">];</span> <span class="c1">// 지훈 탈출 거리</span>
<span class="kt">int</span> <span class="n">r</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span>

<span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">Q1</span><span class="p">;</span> <span class="c1">// 불의 큐</span>
<span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">Q2</span><span class="p">;</span> <span class="c1">// 지훈이의 큐</span>

<span class="kt">void</span> <span class="n">bfsfire</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 불 BFS 함수</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">Q1</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">cur</span> <span class="o">=</span> <span class="n">Q1</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">Q1</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">dir</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">dir</span><span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">Y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>

            <span class="k">if</span><span class="p">(</span><span class="n">nx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="n">r</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="n">c</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// 범위 벗어나면 넘기기</span>
            <span class="k">if</span><span class="p">(</span><span class="n">dist1</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">||</span><span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span><span class="o">==</span><span class="sc">'#'</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// 이미 수행했거나 벽이라면 넘기기</span>

            <span class="n">dist1</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist1</span><span class="p">[</span><span class="n">cur</span><span class="p">.</span><span class="n">X</span><span class="p">][</span><span class="n">cur</span><span class="p">.</span><span class="n">Y</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">Q1</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">bfsJ</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 지훈 탈출 시간 함수</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">Q2</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">Q2</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">Q2</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">dir</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">dir</span><span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">Y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>

            <span class="k">if</span><span class="p">(</span><span class="n">nx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="n">r</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">dist2</span><span class="p">[</span><span class="n">cur</span><span class="p">.</span><span class="n">X</span><span class="p">][</span><span class="n">cur</span><span class="p">.</span><span class="n">Y</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 범위를 벗어나면 탈출한다는 의미이므로 +1 하여 출력</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span><span class="o">==</span><span class="sc">'#'</span> <span class="o">||</span> <span class="n">dist2</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// 벽이거나 이미 수행했다면 넘기기</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dist1</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">dist1</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">dist2</span><span class="p">[</span><span class="n">cur</span><span class="p">.</span><span class="n">X</span><span class="p">][</span><span class="n">cur</span><span class="p">.</span><span class="n">Y</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// 불의 범위이고 불이 지훈의 탈출 거리보다 같거나 작으면 지훈이 불에 타므로(?) 넘기기</span>

            <span class="n">dist2</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist2</span><span class="p">[</span><span class="n">cur</span><span class="p">.</span><span class="n">X</span><span class="p">][</span><span class="n">cur</span><span class="p">.</span><span class="n">Y</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">Q2</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">});</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">r</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">t</span><span class="o">&lt;</span><span class="n">r</span><span class="p">;</span><span class="n">t</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">board</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1002</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// dist를 -1로 만듣기 (CLion으로 옮긴 이후에는 fill 사용 가능)</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">1002</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dist1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">dist2</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// F,J 찾아 큐와 거리 배열에 넣기</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">c</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="sc">'F'</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">Q1</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">});</span>
                <span class="n">dist1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="sc">'J'</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">Q2</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">});</span>
                <span class="n">dist2</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="n">bfsfire</span><span class="p">();</span> <span class="c1">// 함수 수행</span>
    <span class="n">bfsJ</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"IMPOSSIBLE"</span><span class="p">;</span> <span class="c1">// 이 곳에 도착하면 불가능하다는 의미</span>
<span class="p">}</span>
</code></pre></div></div>
<p>조건문의 순서를 신경쓰자<br />
먼저 탈출을 판단해야만 nx, ny에서의 조건들을 안전하게 접근할 수 있다.<br />
예를 들어, 지훈이가 맵 바깥으로 나가는 순간이 탈출 조건이라면,<br />
nx, ny가 맵 밖인지 먼저 확인하지 않고 곧바로 <code class="language-plaintext highlighter-rouge">board[nx][ny] == '#'</code> 같은 조건을 검사하면,<br />
범위를 벗어난 메모리 접근이 발생한다.</p>]]></content><author><name>Junha Hwang</name></author><category term="PS" /><summary type="html"><![CDATA[저번 글에 이어서 오늘도 BFS! BOJ 4179이다. 지난 글에서 풀었던 문제는 한 번의 탐색만 수행하면 되었지만, 오늘의 문제는 탐색을 두 번 수행한 후 각각의 값들을 비교해주어야 한다. 우선 기본형의 BFS를 가져왔고, 불이 붙는 구역의 거리를 구해준다. 그 후 지훈의 탈출 거리를 구해야 하는데, 우선 지훈이 초기 설정 배열의 범위를 벗어난다면 탈출에 성공! +1하여(그 전 거리이므로) 출력한다. 탈출하지 않았다면 continue 할 조건을 찾아 넘기고, 큐가 빌 때까지 탐색을 수행하면 된다. 이렇게 해도 exit이 되지 않았다면, 불가능하므로 IMPOSSIBLE 을 출력한다.]]></summary></entry><entry><title type="html">Stack</title><link href="http://localhost:4000/2025/07/17/0x05.html" rel="alternate" type="text/html" title="Stack" /><published>2025-07-17T00:00:00+09:00</published><updated>2025-07-17T00:00:00+09:00</updated><id>http://localhost:4000/2025/07/17/0x05</id><content type="html" xml:base="http://localhost:4000/2025/07/17/0x05.html"><![CDATA[<h3 id="성질">성질</h3>
<ul>
  <li>원소의 추가 O(1)</li>
  <li>원소의 제거 O(1)</li>
  <li>제일 상단의 원소 확인이 O(1)</li>
  <li>제일 상단이 아닌 원소의 확인/변경 불가능</li>
</ul>

<h2 id="기능과-구현">기능과 구현</h2>

<!--more-->

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">MX</span> <span class="o">=</span> <span class="mi">1000005</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dat</span><span class="p">[</span><span class="n">MX</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="n">dat</span><span class="p">[</span><span class="n">pos</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">pop</span><span class="p">(){</span>
    <span class="n">pos</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">top</span><span class="p">(){</span>
    <span class="k">return</span> <span class="n">dat</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="push">push</h4>
<ul>
  <li>스택의 맨 위에 요소를 추가</li>
  <li><code class="language-plaintext highlighter-rouge">s.push(10);</code></li>
</ul>

<h4 id="pop">pop</h4>
<ul>
  <li>스택의 맨 위 요소를 제거</li>
  <li><code class="language-plaintext highlighter-rouge">s.pop();</code></li>
</ul>

<h4 id="top">top</h4>
<ul>
  <li>스택의 맨 위 요소에 접근 (읽기/수정 가능)</li>
  <li><code class="language-plaintext highlighter-rouge">int x = s.top();</code></li>
</ul>

<h4 id="empty">empty</h4>
<ul>
  <li>스택이 비어 있는지 확인</li>
  <li><code class="language-plaintext highlighter-rouge">if (s.empty()) { ... }</code></li>
</ul>

<h4 id="size">size</h4>
<ul>
  <li>스택에 들어 있는 요소 개수 반환</li>
  <li><code class="language-plaintext highlighter-rouge">int n = s.size();</code></li>
</ul>]]></content><author><name>Junha Hwang</name></author><category term="Learn" /><summary type="html"><![CDATA[성질 원소의 추가 O(1) 원소의 제거 O(1) 제일 상단의 원소 확인이 O(1) 제일 상단이 아닌 원소의 확인/변경 불가능 기능과 구현]]></summary></entry><entry><title type="html">기초적인 BFS</title><link href="http://localhost:4000/2025/07/17/BOJ1926.html" rel="alternate" type="text/html" title="기초적인 BFS" /><published>2025-07-17T00:00:00+09:00</published><updated>2025-07-17T00:00:00+09:00</updated><id>http://localhost:4000/2025/07/17/BOJ1926</id><content type="html" xml:base="http://localhost:4000/2025/07/17/BOJ1926.html"><![CDATA[<p>BFS를 공부하기 위해 간단한 BFS(<a href="https://www.acmicpc.net/problem/1926" target="_blank">BOJ 1926</a>)를 풀어보았다.</p>

<h4 id="문제-정의">문제 정의</h4>

<p>도화지에 그림이 그려져 있을 때, 그림의 개수와 그 그림 중 가장 넓은 것의 넓이를 출력하는 문제이다.<br />
그림이란 1로 연결된 것을 의미하며, 가로나 세로로 연결된 1들은 하나의 그림으로 간주한다.<br />
그림의 넓이는 그림에 포함된 1의 개수이다.</p>

<h4 id="접근">접근</h4>

<!--more-->

<p>모든 칸을 (0, 0)부터 차례대로 확인한다.<br />
만약 현재 칸이 아직 방문하지 않은 그림이라면(또한 board가 1), 새로운 그림을 찾은 것이므로 그림의 개수를 1 카운트한다.<br />
그 지점에서부터 BFS를 시작하여 연결된 모든 그림 영역을 찾아 visit 표시를 하고 push 한다.<br />
BFS를 수행하며 area를 세어 현재 그림의 넓이를 계산한다.<br />
하나의 그림 탐색이 끝나면, 이 그림의 넓이가 이전에 찾은 가장 넓은 그림의 넓이보다 큰지 확인하고, 크다면 최댓값을 갱신한다.<br />
모든 칸을 확인할 때까지 위 과정을 반복한다.</p>

<h4 id="코드">코드</h4>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="cp">#define X first
#define Y second // pair에서 first, second를 줄여서 쓰기 위해서 사용
</span><span class="kt">int</span> <span class="n">board</span><span class="p">[</span><span class="mi">502</span><span class="p">][</span><span class="mi">502</span><span class="p">];</span>
<span class="kt">bool</span> <span class="n">vis</span><span class="p">[</span><span class="mi">502</span><span class="p">][</span><span class="mi">502</span><span class="p">];</span> <span class="c1">// 해당 칸을 방문했는지 여부를 저장</span>
<span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span> <span class="c1">// 상하좌우 네 방향을 의미</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
  	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>
    
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
		<span class="p">}</span>
	<span class="p">}</span>
    
	<span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">mx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
			<span class="n">num</span><span class="o">++</span><span class="p">;</span>
			<span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">Q</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">area</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

			<span class="n">Q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">});</span>
			<span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

	    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">Q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
		<span class="n">area</span><span class="o">++</span><span class="p">;</span>
    	<span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
		<span class="n">Q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
			<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">dir</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">dir</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 상하좌우 칸을 살펴볼 것이다.</span>
      			<span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
      			<span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">Y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span> <span class="c1">// nx, ny에 dir에서 정한 방향의 인접한 칸의 좌표가 들어감</span>
      			
				<span class="k">if</span><span class="p">(</span><span class="n">nx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="n">m</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// 범위 밖일 경우 넘어감</span>
      			<span class="k">if</span><span class="p">(</span><span class="n">vis</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">||</span> <span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c1">// 이미 방문한 칸이거나 파란 칸이 아닐 경우</span>
      			<span class="n">vis</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// (nx, ny)를 방문했다고 명시</span>
      			<span class="n">Q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">nx</span><span class="p">,</span><span class="n">ny</span><span class="p">});</span>
    			<span class="p">}</span>
  			<span class="p">}</span>
			<span class="n">mx</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">area</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span> <span class="o">&lt;&lt;</span> <span class="n">mx</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>어려우</p>]]></content><author><name>Junha Hwang</name></author><category term="PS" /><summary type="html"><![CDATA[BFS를 공부하기 위해 간단한 BFS(BOJ 1926)를 풀어보았다. 문제 정의 도화지에 그림이 그려져 있을 때, 그림의 개수와 그 그림 중 가장 넓은 것의 넓이를 출력하는 문제이다. 그림이란 1로 연결된 것을 의미하며, 가로나 세로로 연결된 1들은 하나의 그림으로 간주한다. 그림의 넓이는 그림에 포함된 1의 개수이다. 접근]]></summary></entry><entry><title type="html">250717</title><link href="http://localhost:4000/2025/07/17/%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%83%9D%EC%84%B1.html" rel="alternate" type="text/html" title="250717" /><published>2025-07-17T00:00:00+09:00</published><updated>2025-07-17T00:00:00+09:00</updated><id>http://localhost:4000/2025/07/17/%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%83%9D%EC%84%B1</id><content type="html" xml:base="http://localhost:4000/2025/07/17/%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%83%9D%EC%84%B1.html"><![CDATA[<p>사실 이건 정말 간단하게 템플릿만 가져와서 몇 가지만 고치면 된다<br />
뭔가 개발이나 IT 관련된 전공이나 분야에 있다면 블로그는 가지고 있어야 한다는 그런 편견..이 있기도 하고<br />
이걸 계속 만지다 보면 마크다운 문법이나 html에 익숙해지지 않을까 생각을 하며<br />
내가 관심있는 주제에 대한 아카이빙은 좋은 거니까! 또 영어 연습장이 될 수도?</p>

<!--more-->

<h3 id="요즘의-생각">요즘의 생각</h3>
<p>잘하고 싶다. 잘하고 싶어 뭐든지 / 평균 이상은 할 수 있는게 나의 장점이라고 생각했는데
수학도 못하고 나는 까막눈이다. 관심이나 흥미를 가지는 것들을 깊게 파다보면 언젠가 되겠지</p>]]></content><author><name>Junha Hwang</name></author><category term="일기" /><summary type="html"><![CDATA[사실 이건 정말 간단하게 템플릿만 가져와서 몇 가지만 고치면 된다 뭔가 개발이나 IT 관련된 전공이나 분야에 있다면 블로그는 가지고 있어야 한다는 그런 편견..이 있기도 하고 이걸 계속 만지다 보면 마크다운 문법이나 html에 익숙해지지 않을까 생각을 하며 내가 관심있는 주제에 대한 아카이빙은 좋은 거니까! 또 영어 연습장이 될 수도?]]></summary></entry></feed>